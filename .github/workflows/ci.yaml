name: ci

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 13 * * *"

jobs:
  check-for-new-cascadia:
    runs-on: ubuntu-20.04
    outputs:
      tag_name: ${{ env.CASCADIATAG }}
      tag_exists: ${{ steps.check_tag.outputs.exists }}

    steps:
    - name: Fetch latest release of Cascadia Code
      uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
        route: GET /repos/{owner}/{repo}/releases/latest
        owner: microsoft
        repo: cascadia-code
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Get the latest Cascadia tag
      run: |
        echo "CASCADIATAG=${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}" >> $GITHUB_ENV
        echo "Latest Cascadia tag is ${{ env.CASCADIATAG }}"
    - name: Check if tag exists
      uses: mukunku/tag-exists-action@v1.0.0
      id: check_tag
      with: 
        tag: ${{ env.CASCADIATAG }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    needs: check-for-new-cascadia
    if: ${{ github.event_name != 'schedule' || needs.check-for-new-cascadia.outputs.tag_exists != 'true' }}
    runs-on: ubuntu-18.04
    env:
      NERDFONTVERS: v2.1.0

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download latest version of Cascadia
      run: |
        CASCADIAVERS=`curl -L 'https://github.com/microsoft/cascadia-code/releases/latest' | grep CascadiaCode | sed 's!\(.*/microsoft/cascadia-code/releases/download/\([^"]*\).*\|.*span.*\)!\2!'`
        echo Downloading ${CASCADIAVERS}
        curl -L https://github.com/microsoft/cascadia-code/releases/download/${CASCADIAVERS}  -O
        unzip CascadiaCode*.zip
    - name: Install FontForge
      run: |
        sudo add-apt-repository ppa:fontforge/fontforge -y -u;
        sudo apt-get install fontforge -y;
    - name: Download and patch Font Patcher
      run: |
        curl -L https://raw.githubusercontent.com/ryanoasis/nerd-fonts/${NERDFONTVERS}/font-patcher --output font-patcher
        patch font-patcher 0001*.patch
    - name: Download source fonts
      run: |
        chmod +x download-source-fonts.sh
        ./download-source-fonts.sh
    - name: Install PIP
      run: sudo apt install python-pip -y
    - name: Install configparser
      run: pip install configparser
    - name: Extract additional powerline glyphs
      run: fontforge -lang=ff -script extract-extra-glyphs
    - name: Build Powerline
      run: |
        ./do_generate 01 --powerline --mono CascadiaCodePL-Regular.ttf            DelugiaPL.ttf              "Delugia PL"       "Regular"
        ./do_generate 02 --powerline --mono CascadiaCodePL-Bold.ttf               DelugiaPL-Bold.ttf         "Delugia PL"       "Bold"
        ./do_generate 03 --powerline --mono CascadiaCodePL-Italic.ttf             DelugiaPL-Italic.ttf       "Delugia PL"       "Italic"
        ./do_generate 04 --powerline --mono CascadiaCodePL-BoldItalic.ttf         DelugiaPL-BoldItalic.ttf   "Delugia PL"       "Bold Italic"
        ./do_generate 05 --powerline --mono CascadiaCodePL-Light.ttf              DelugiaPLLight.ttf         "Delugia PL Light" ""
        ./do_generate 06 --powerline --mono CascadiaCodePL-LightItalic.ttf        DelugiaPLLight-Italic.ttf  "Delugia PL Light" "Italic"
        mkdir delugia-powerline
        mv Delugia*ttf delugia-powerline
        zip delugia-powerline.zip delugia-powerline/*
    - name: Build MonoPowerline
      run: |
        ./do_generate 11 --powerline --mono CascadiaMonoPL-Regular.ttf            DelugiaMonoPL.ttf              "Delugia PL Mono"       "Regular"
        ./do_generate 12 --powerline --mono CascadiaMonoPL-Bold.ttf               DelugiaMonoPL-Bold.ttf         "Delugia PL Mono"       "Bold"
        ./do_generate 13 --powerline --mono CascadiaMonoPL-Italic.ttf             DelugiaMonoPL-Italic.ttf       "Delugia PL Mono"       "Italic"
        ./do_generate 14 --powerline --mono CascadiaMonoPL-BoldItalic.ttf         DelugiaMonoPL-BoldItalic.ttf   "Delugia PL Mono"       "Bold Italic"
        ./do_generate 15 --powerline --mono CascadiaMonoPL-Light.ttf              DelugiaMonoPLLight.ttf         "Delugia PL Mono Light" ""
        ./do_generate 16 --powerline --mono CascadiaCodePL-LightItalic.ttf        DelugiaMonoPLLight-Italic.ttf  "Delugia PL Mono Light" "Italic"
        mkdir delugia-mono-powerline
        mv Delugia*ttf delugia-mono-powerline
        zip delugia-mono-powerline.zip delugia-mono-powerline/*
    - name: Build Complete
      run: |
        ./do_generate 21 -c --mono CascadiaCodePL-Regular.ttf            DelugiaComplete.ttf              "Delugia"       "Regular"
        ./do_generate 22 -c --mono CascadiaCodePL-Bold.ttf               DelugiaComplete-Bold.ttf         "Delugia"       "Bold"
        ./do_generate 23 -c --mono CascadiaCodePL-Italic.ttf             DelugiaComplete-Italic.ttf       "Delugia"       "Italic"
        ./do_generate 24 -c --mono CascadiaCodePL-BoldItalic.ttf         DelugiaComplete-BoldItalic.ttf   "Delugia"       "Bold Italic"
        ./do_generate 25 -c --mono CascadiaCodePL-Light.ttf              DelugiaCompleteLight.ttf         "Delugia Light" ""
        ./do_generate 26 -c --mono CascadiaCodePL-LightItalic.ttf        DelugiaCompleteLight-Italic.ttf  "Delugia Light" "Italic"
        mkdir delugia-complete
        mv Delugia*ttf delugia-complete
        zip delugia-complete.zip delugia-complete/*
    - name: Build Mono Complete
      run: |
        ./do_generate 31 -c --mono CascadiaMonoPL-Regular.ttf            DelugiaMonoComplete.ttf              "Delugia Mono"       "Regular"
        ./do_generate 32 -c --mono CascadiaMonoPL-Bold.ttf               DelugiaMonoComplete-Bold.ttf         "Delugia Mono"       "Bold"
        ./do_generate 33 -c --mono CascadiaMonoPL-Italic.ttf             DelugiaMonoComplete-Italic.ttf       "Delugia Mono"       "Italic"
        ./do_generate 34 -c --mono CascadiaMonoPL-BoldItalic.ttf         DelugiaMonoComplete-BoldItalic.ttf   "Delugia Mono"       "Bold Italic"
        ./do_generate 35 -c --mono CascadiaMonoPL-Light.ttf              DelugiaMonoCompleteLight.ttf         "Delugia Mono Light" ""
        ./do_generate 36 -c --mono CascadiaCodePL-LightItalic.ttf        DelugiaMonoCompleteLight-Italic.ttf  "Delugia Mono Light" "Italic"
        mkdir delugia-mono-complete
        mv Delugia*ttf delugia-mono-complete
        zip delugia-mono-complete.zip delugia-mono-complete/*
    - name: Build Book Complete
      run: |
        ./do_generate 41 -c -c CascadiaCodePL-Regular.ttf            DelugiaBook.ttf              "Delugia Book"       "Regular"
        ./do_generate 42 -c -c CascadiaCodePL-Bold.ttf               DelugiaBook-Bold.ttf         "Delugia Book"       "Bold"
        ./do_generate 43 -c -c CascadiaCodePL-Italic.ttf             DelugiaBook-Italic.ttf       "Delugia Book"       "Italic"
        ./do_generate 44 -c -c CascadiaCodePL-BoldItalic.ttf         DelugiaBook-BoldItalic.ttf   "Delugia Book"       "Bold Italic"
        ./do_generate 45 -c -c CascadiaCodePL-Light.ttf              DelugiaBookLight.ttf         "Delugia Book Light" ""
        ./do_generate 46 -c -c CascadiaCodePL-LightItalic.ttf        DelugiaBookLight-Italic.ttf  "Delugia Book Light" "Italic"
        mkdir delugia-book
        mv Delugia*ttf delugia-book
        zip delugia-book.zip delugia-book/*
    - name: Check for preexisting glyphs
      run: |
        grep 'Found existing' process*.log
    - uses: actions/upload-artifact@master
      with:
        name: Delugia Powerline
        path: "delugia-powerline"
    - uses: actions/upload-artifact@master
      with:
        name: Delugia Mono Powerline
        path: "delugia-mono-powerline"
    - uses: actions/upload-artifact@master
      with:
        name: Delugia Complete
        path: "delugia-complete"
    - uses: actions/upload-artifact@master
      with:
        name: Delugia Mono Complete
        path: "delugia-mono-complete"
    - uses: actions/upload-artifact@master
      with:
        name: Delugia Book
        path: "delugia-book"

    # Release part
    - name: Create tag
      if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && needs.check-for-new-cascadia.outputs.tag_exists != 'true' }}
      uses: actions/github-script@v3
      with:
        github-token: ${{ github.token }}
        script: |
          const tagName = "${{ needs.check-for-new-cascadia.outputs.tag_name }}";

          const createdTag = await github.git.createTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: tagName,
            message: `Bump Cascadia version to ${tagName}`,
            object: context.sha,
            type: "commit"
          })

          github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: createdTag.data.sha
          })
    - name: Get tag name
      id: get_tag_name
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: battila7/get-version-action@v2
    - name: Release
      uses: softprops/action-gh-release@v1
      if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || needs.check-for-new-cascadia.outputs.tag_exists != 'true') }}
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && steps.get_tag_name.outputs.version || needs.check-for-new-cascadia.outputs.tag_name }}
        files: |
          delugia-powerline.zip
          delugia-mono-powerline.zip
          delugia-complete.zip
          delugia-mono-complete.zip
          delugia-book.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
